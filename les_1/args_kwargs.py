"""
В Python, *args и **kwargs являются соглашениями, используемыми для передачи переменного количества аргументов
в функцию. *args используется для передачи позиционных аргументов, а **kwargs — для передачи аргументов-ключевых слов.
 Эти механизмы предоставляют гибкость в определении функций, позволяя им принимать произвольное количество аргументов.

*args
*args позволяет функции принимать произвольное количество позиционных аргументов. Аргументы, передаваемые в функцию,
 доступны внутри неё в виде кортежа с именем args.
"""


def функция_с_args(*args):
    for arg in args:
        print(arg)


функция_с_args('один', 'два', 'три')

"""**kwargs
**kwargs позволяет функции принимать произвольное количество аргументов-ключевых слов. Аргументы, передаваемые
в функцию, доступны внутри неё в виде словаря с именем kwargs."""


def функция_с_kwargs(**kwargs):
    for key, value in kwargs.items():
        print(f"{key} = {value}")


функция_с_kwargs(первый='один', второй='два', третий='три')

"""
Вместе
*args и **kwargs можно использовать вместе, если необходимо, чтобы функция могла принимать и произвольное количество
 позиционных, и произвольное количество именованных аргументов.
"""


def функция_с_args_kwargs(*args, **kwargs):
    for arg in args:
        print(arg)
    for key, value in kwargs.items():
        print(f"{key} = {value}")


функция_с_args_kwargs('один', 'два', первый='один', второй='два')

"""
При использовании вместе, *args должен идти перед **kwargs. Эти механизмы делают определение функций в Python
 чрезвычайно гибким, позволяя им обрабатывать различное количество аргументов в очень удобной форме.
"""
