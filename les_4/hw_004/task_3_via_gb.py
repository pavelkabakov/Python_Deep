# У вас есть банковская карта с начальным балансом равным 0 у.е. Вы хотите управлять этой картой,
# выполняя следующие операции, для выполнения которых необходимо написать следующие функции:
#
# check_multiplicity(amount): Проверка кратности суммы при пополнении и снятии.
# deposit(amount): Пополнение счёта.
# withdraw(amount): Снятие денег.
# exit(): Завершение работы и вывод итоговой информации о состоянии счета и проведенных операциях.
#
# Пополнение счета:
#
# Функция deposit(amount) позволяет клиенту пополнять свой счет на определенную сумму.
# Пополнение счета возможно только на сумму, которая кратна MULTIPLICITY.
#
# Снятие средств:
#
# Функция withdraw(amount) позволяет клиенту снимать средства со счета. Сумма снятия также должна быть кратной
# MULTIPLICITY. При снятии средств начисляется комиссия в процентах от снимаемой суммы, которая может варьироваться
# от MIN_REMOVAL до MAX_REMOVAL.
#
# Завершение работы:
#
# Функция exit() завершает работу с банковским счетом. Перед завершением, если на счету больше RICHNESS_SUM,
# начисляется налог на богатство в размере RICHNESS_PERCENT процентов.
#
# Проверка кратности суммы:
#
# Функция check_multiplicity(amount) проверяет, кратна ли сумма amount заданному множителю MULTIPLICITY.
# Реализуйте программу для управления банковским счетом, используя библиотеку decimal для точных вычислений.
#
# Пример
# На входе:
#
# deposit(10000)
# withdraw(4000)
# exit()
#
# print(operations)
#
# На выходе:
#
# ['Пополнение карты на 10000 у.е. Итого 10000 у.е.',
#  'Снятие с карты 4000 у.е. Процент за снятие 60 у.е.. Итого 5940 у.е.']
#
# На входе:
# deposit(1000)
# withdraw(200)
# exit()
#
# print(operations)
#
# На выходе:
# ['Пополнение карты на 1000 у.е. Итого 1000 у.е.', 'Снятие с карты 200 у.е. Процент за снятие 30 у.е.. Итого 770 у.е.',
#  'Возьмите карту на которой 770 у.е.']
#
# На входе:
# deposit(1000)
# withdraw(200)
# withdraw(300)
# deposit(500)
# withdraw(3000)
# exit()
#
# print(operations)
#
# На выходе:
# ['Пополнение карты на 1000 у.е. Итого 1000 у.е.', 'Снятие с карты 200 у.е. Процент за снятие 30 у.е.. Итого 770 у.е.', 'Снятие с карты 300 у.е. Процент за снятие 30 у.е.. Итого 440 у.е.', 'Пополнение карты на 500 у.е. Итого 940 у.е.', 'Недостаточно средств. Сумма с комиссией 3045.000 у.е. На карте 940 у.е.', 'Возьмите карту на которой 940 у.е.']
#
# На входе:
# deposit(173)
# withdraw(21)
# exit()
#
# print(operations)
#
# На выходе:
# Сумма должна быть кратной 50 у.е.
# Сумма должна быть кратной 50 у.е.
# ['Недостаточно средств. Сумма с комиссией 51 у.е. На карте 0 у.е.', 'Возьмите карту на которой 0 у.е.']
#
# На входе:
# deposit(1000000000000000)
# withdraw(200)
# withdraw(300)
# deposit(500)
# withdraw(3000)
# exit()
#
# print(operations)
#
# На выходе:
# ['Пополнение карты на 1000000000000000 у.е. Итого 1000000000000000 у.е.', 'Снятие с карты 200 у.е. Процент за снятие 30 у.е.. Итого 999999999999770 у.е.', 'Снятие с карты 300 у.е. Процент за снятие 30 у.е.. Итого 999999999999440 у.е.', 'Пополнение карты на 500 у.е. Итого 999999999999940 у.е.', 'Снятие с карты 3000 у.е. Процент за снятие 45.000 у.е.. Итого 999999999996895.000 у.е.', 'Вычтен налог на богатство 0.1% в сумме 99999999999689.5000 у.е. Итого 899999999997205.5000 у.е.', 'Возьмите карту на которой 899999999997205.5000 у.е.']


import decimal

MULTIPLICITY = 50
PERCENT_REMOVAL = decimal.Decimal(15) / decimal.Decimal(1000)
MIN_REMOVAL = decimal.Decimal(30)
MAX_REMOVAL = decimal.Decimal(600)
PERCENT_DEPOSIT = decimal.Decimal(3) / decimal.Decimal(100)
COUNTER4PERCENTAGES = 3
RICHNESS_PERCENT = decimal.Decimal(10) / decimal.Decimal(100)
RICHNESS_SUM = decimal.Decimal(10_000_000)

bank_account = decimal.Decimal(0)
count = 0
operations = []

def check_multiplicity(amount):
    """Проверка кратности суммы"""
    if (amount % MULTIPLICITY) != 0:
        print(f'Сумма должна быть кратной {MULTIPLICITY} у.е.')
        return False
    return True

def deposit(amount):
    """Пополнение счета"""
    global bank_account, count
    if not check_multiplicity(amount):
        print(f'Сумма должна быть кратной {MULTIPLICITY} у.е.')
        return False  # Операция не выполнена из-за некратной суммы
    count += 1
    bank_account += amount
    operations.append(f'Пополнение карты на {amount} у.е. Итого {bank_account} у.е.')
    return True


def withdraw(amount):
    """Снятие денег"""
    global bank_account, count
    percent = amount * PERCENT_REMOVAL
    percent = MIN_REMOVAL if percent < MIN_REMOVAL else MAX_REMOVAL if percent > MAX_REMOVAL else percent
    if bank_account >= amount + percent:
        count += 1
        bank_account = bank_account - amount - percent
        operations.append(f'Снятие с карты {amount} у.е. Процент за снятие {int(percent)} у.е.. Итого {int(bank_account)} у.е.')
    else:
        operations.append(
            f'Недостаточно средств. Сумма с комиссией {amount + int(percent)} у.е. На карте {int(bank_account)} у.е.')

def exit():
    global bank_account, operations
    if bank_account > RICHNESS_SUM:
        percent = bank_account * RICHNESS_PERCENT
        bank_account -= percent
        operations.append(
            f'Вычтен налог на богатство {RICHNESS_PERCENT}% в сумме {percent} у.е. Итого {bank_account} у.е.')
    operations.append(f'Возьмите карту на которой {bank_account} у.е.')


deposit(1000)
withdraw(200)
withdraw(300)
deposit(500)
withdraw(3000)
exit()

print(operations)


"""
Ваш код для управления банковской картой выглядит организованно и включает функции для проверки кратности суммы, пополнения счета, снятия денег, и завершения работы с выводом итоговой информации. Вот несколько замечаний и предложений по улучшению:

Общие замечания
Использование decimal.Decimal: Вы правильно используете decimal.Decimal для финансовых вычислений, что обеспечивает высокую точность операций с деньгами.

Константы: Определение констант в начале файла — хорошая практика, которая повышает читаемость кода.

Глобальные переменные: Использование глобальных переменных (bank_account, count, operations) допустимо для небольших скриптов, но в более крупных приложениях лучше избегать их или использовать классы для инкапсуляции состояния.

Конкретные предложения по улучшению
Повторное использование сообщения о кратности суммы: В функции deposit повторно проверяется кратность суммы, хотя это уже делается в check_multiplicity. Возможно, стоит убрать лишнюю проверку в deposit, поскольку check_multiplicity и так возвращает False, если сумма не кратна.

Обработка комиссии при снятии: Ваша логика расчета комиссии правильная, но присваивание percent можно упростить, используя функцию clamp в Python 3.8 и выше, которая ограничит значение в заданном диапазоне. Если ваша версия Python старше, текущий подход вполне рабочий.

Точность вывода: При выводе операций вы округляете percent и bank_account до целых чисел, что может привести к потере точности в финансовых расчетах. Лучше сохранять полную точность до вывода итоговой суммы.

Непоследовательное использование decimal.Decimal: В функции exit вы выполняете вычисления без явного преобразования результатов в decimal.Decimal, что может привести к потере точности. Рекомендуется обеспечить, чтобы все математические операции с деньгами выполнялись с использованием Decimal.

Улучшение читаемости: Возможно, стоит добавить комментарии к блокам кода внутри функций для улучшения читаемости, особенно в сложных частях, как расчет комиссии.

Использование RICHNESS_PERCENT без умножения на 100: В комментарии к вычитанию налога на богатство указано "10% налог на богатство", но при расчете вы используете значение RICHNESS_PERCENT напрямую. При выводе информации об налоге убедитесь, что процент выражен в понятной для пользователя форме.

Оптимизация check_multiplicity и вызовов функций: Ваш код дублирует вывод ошибки о кратности в deposit, хотя check_multiplicity уже выполняет эту проверку. Рекомендуется оптимизировать логику, чтобы избежать повторения.

В целом, код хорошо структурирован и выполняет поставленные задачи. Учтите предложения по улучшению для повышения эффективности и читаемости кода.
"""