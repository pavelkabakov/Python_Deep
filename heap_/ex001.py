import heapq
arr = [3, 1, 4, 1, 5, 9]
print(arr)
heapq.heapify(arr)  # Превращает список в кучу
print("Превращает список в кучу")
print(arr)  # [1, 1, 4, 3, 5, 9]

# Для добавления элемента используется функция heappush(), которая вставляет новый элемент в кучу, поддерживая структуру min-heap.
heapq.heappush(arr, 2)
print("добавлениe элемента '2'")
print(arr)  # [1, 1, 2, 3, 5, 9, 4]

# Для извлечения минимального элемента используется функция heappop(). После удаления минимального элемента структура кучи сохраняется.
smallest = heapq.heappop(arr)
print("извлечения минимального элемента")
print(smallest)  # 1
print(arr)  # [1, 3, 2, 4, 5, 9]

# Функция heappushpop() сначала добавляет новый элемент, а затем извлекает минимальный элемент из кучи.
smallest = heapq.heappushpop(arr, 6)
print("Функция heappushpop() сначала добавляет новый элемент '6', а затем извлекает минимальный элемент из кучи")
print(smallest)  # 1 (он был минимальным до вставки)
print(arr)  # [2, 3, 6, 4, 5, 9]

# Функция heappushpop() сначала добавляет новый элемент, а затем извлекает минимальный элемент из кучи.
smallest = heapq.heappushpop(arr, 8)
print("Функция heappushpop() сначала добавляет новый элемент '8', а затем извлекает минимальный элемент из кучи")
print(smallest)  # 1 (он был минимальным до вставки)
print(arr)  # [2, 3, 6, 4, 5, 9]

