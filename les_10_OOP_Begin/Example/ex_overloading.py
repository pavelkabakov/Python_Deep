"""
Перегрузка (overloading) — это концепция, используемая в программировании, которая позволяет создавать несколько методов,
 функций или операторов с одинаковым именем, но различающихся типом и/или количеством аргументов. Это позволяет одному
  и тому же имени функции или метода выполнять разные действия в зависимости от контекста его вызова. Перегрузка
  поддерживается во многих объектно-ориентированных языках программирования, таких как C++, Java и C#, но в Python
   реализуется по-другому из-за его динамической типизации.

Перегрузка методов
Как было упомянуто, перегрузка методов позволяет определять в классе несколько методов с одним и тем же именем, но с
 разными параметрами (разное количество или типы аргументов). Вызываемый метод будет определяться на основе аргументов, переданных при вызове.

Перегрузка операторов
Перегрузка операторов позволяет изменять или расширять стандартное поведение встроенных операторов Python (например, +,
 -, *, / и т.д.) для объектов пользовательских классов. Это достигается путем реализации специальных методов в классе
  (например, __add__ для +, __sub__ для - и т.д.).

Реализация в Python
Хотя Python не поддерживает перегрузку функций и методов в традиционном смысле (из-за динамической типизации и
возможности использования аргументов по умолчанию), он предлагает альтернативные способы достижения подобного
 функционала:

Использование аргументов по умолчанию и именованных аргументов для создания функций, способных обрабатывать различное
 количество и типы аргументов.
Использование *args и **kwargs для приема произвольного числа позиционных и именованных аргументов соответственно.
Использование декораторов, таких как @singledispatch из модуля functools, для реализации перегрузки на основе типа
аргумента.
Пример перегрузки оператора для пользовательского класса:

В этом примере класс Point перегружает оператор сложения (+), позволяя складывать два объекта Point и возвращая
новый объект Point с суммированными координатами.
"""


class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    # Перегрузка оператора сложения
    def __add__(self, other):
        return Point(self.x + other.x, self.y + other.y)

    def __str__(self):
        return f"Point({self.x}, {self.y})"


p1 = Point(1, 2)
p2 = Point(3, 4)
print(p1 + p2)  # Вывод: Point(4, 6)
