"""
–ó–∞–¥–∞–Ω–∏–µ ‚Ññ5
üìå –û–±—ä–µ–¥–∏–Ω–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –ø—Ä–æ—à–ª—ã—Ö –∑–∞–¥–∞—á.
üìå –§—É–Ω–∫—Ü–∏—é —É–≥–∞–¥–∞–π–∫—É –∑–∞–¥–µ–∫–æ—Ä–∏—Ä—É–π—Ç–µ:
‚óã –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞–º–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤,
‚óã –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º –∫–æ–Ω—Ç—Ä–æ–ª—è –∑–Ω–∞—á–µ–Ω–∏–π –∏
‚óã –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞.
üìå –í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤.
"""

from random import randint
import functools
import json

my_list = []


def control_param_decorator(func):
    @functools.wraps(func)
    def wrapper(count):
        global hidden_num
        hidden_num = int(input('–ó–∞–¥–∞–π—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100: '))
        if not 0 < hidden_num < 101:
            hidden_num = randint(1, 100)
        global attempts_num
        attempts_num = int(input('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç 1 –¥–æ 10: '))
        if not 0 < attempts_num < 11:
            attempts_num = randint(1, 10)
        result = func(count, hidden_num, attempts_num)
        print(result)
        return result

    return wrapper


def save_param_decorator(func):
    @functools.wraps(func)
    def wrapper(count):
        result = func(count)
        result_dict = {f'{hidden_num, attempts_num}': result}
        my_list.append(result_dict)
        with open(f'{func.__name__}.json', 'w', encoding='utf-8') as f:
            json.dump(my_list, f, ensure_ascii=False)
        return result

    return wrapper


def count_func(func):
    @functools.wraps(func)
    def wrapper(count):
        for _ in range(count):
            func(count)

    return wrapper


# @count_func
# @save_param_decorator
# @control_param_decorator
def guess_num(count, hidden_num=0, attempts_num=0):
    for _ in range(attempts_num):
        user_num = int(input('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë —á–∏—Å–ª–æ: '))
        if user_num == hidden_num:
            return '–í—ã —É–≥–∞–¥–∞–ª–∏!'
    return '–ü–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –≤—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏!'


count_func(save_param_decorator(control_param_decorator(guess_num)))(3)
