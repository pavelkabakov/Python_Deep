import heapq


def dijkstra(graph, N, S, F):
    # Массив расстояний и посещённых вершин
    dist = [float('inf')] * N
    dist[S] = 0  # Расстояние до стартовой вершины равно 0
    visited = [False] * N  # Массив посещённых вершин

    # Очередь с приоритетом
    priority_queue = [(0, S)]  # Элементы в очереди: (расстояние, вершина)

    while priority_queue:
        d, u = heapq.heappop(priority_queue)  # Извлекаем вершину с наименьшим расстоянием
        # print(f'd = {d}, u = {u}')
        # Если вершина уже посещена, пропускаем
        if visited[u]:
            continue

        visited[u] = True  # Помечаем вершину как посещённую

        # Обновляем расстояния до соседей
        for v in range(N):
            weight = graph[u][v]
            if weight != -1 and not visited[v]:  # Существуют ли рёбра?
                new_dist = d + weight  # Новое расстояние
                if new_dist < dist[v]:
                    dist[v] = new_dist  # Обновляем минимальное расстояние
                    heapq.heappush(priority_queue, (new_dist, v))  # Добавляем в очередь

    # Возвращаем расстояние до конечной вершины или -1, если путь недостижим
    return dist[F] if dist[F] != float('inf') else -1


# Статичный ввод данных
N = 5  # Количество вершин
S = 1  # Начальная вершина
F = 5  # Конечная вершина
# Матрица смежности графа
# обозначения вершин a=1, b=2, c=3, d=4, e=5
graph = [
    [0, 1, -1, 3, -1],  # Вершина 1
    [-1, 0, 3, 1, 2],  # Вершина 2
    [-1, -1, 0, -1, -1],  # Вершина 3
    [-1, -1, 3, 0, 1],  # Вершина 4
    [-1, -1, 2, -1, 0]  # Вершина 5
]
# Приводим индексацию к нулям
S -= 1
F -= 1
# Вызываем алгоритм Дейкстры
result = dijkstra(graph, N, S, F)
print(f'A - E = {result}')

# Статичный ввод данных
N = 5  # Количество вершин
S = 5  # Начальная вершина
F = 2  # Конечная вершина
# Матрица смежности графа
# обозначения вершин a=1, b=2, c=3, d=4, e=5
graph = [
    [0, 1, -1, 3, -1],  # Вершина 1
    [-1, 0, 3, 1, 2],  # Вершина 2
    [-1, -1, 0, -1, -1],  # Вершина 3
    [-1, -1, 3, 0, 1],  # Вершина 4
    [-1, -1, 2, -1, 0]  # Вершина 5
]
# Приводим индексацию к нулям
S -= 1
F -= 1
# Вызываем алгоритм Дейкстры
result = dijkstra(graph, N, S, F)
print(f'E - B = {result}')

# Статичный ввод данных
N = 5  # Количество вершин
S = 1  # Начальная вершина
F = 3  # Конечная вершина
# Матрица смежности графа
# обозначения вершин a=1, b=2, c=3, d=4, e=5
graph = [
    [0, 1, -1, 3, -1],  # Вершина 1
    [-1, 0, 3, 1, 2],  # Вершина 2
    [-1, -1, 0, -1, -1],  # Вершина 3
    [-1, -1, 3, 0, 1],  # Вершина 4
    [-1, -1, 2, -1, 0]  # Вершина 5
]
# Приводим индексацию к нулям
S -= 1
F -= 1
# Вызываем алгоритм Дейкстры
result = dijkstra(graph, N, S, F)
print(f'A - C = {result}')